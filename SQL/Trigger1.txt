INSERT INTO public.disciplina(cod_disciplina, cod_curso, nome_disciplina) VALUES
(10001, 1, 'Cálculo 1'),
(10002, 1, 'Introdução à Programação'),
(10003, 1, 'Fundamentos de Sistemas'),
(10004, 1, 'Estatística 1'),
(10005, 1, 'Estruturas de Dados 1');

INSERT INTO public.oferecida_em(cod_semestre, cod_disciplina, cod_local, cod_funcionario, dia_semana, horario_aula) VALUES
(1, 10001, 1, 791, 2, '19:00'),
(1, 10002, 2, 336, 3, '19:00'),
(1, 10003, 12, 575, 4, '19:00'),
(1, 10004, 13, 108, 5, '19:00'),
(1, 10005, 15, 289, 6, '19:00');

-- Ao cadastrar um novo graduando, automaticamente o matricula em 5 matérias iniciais do curso
CREATE OR REPLACE FUNCTION matricula_novo_aluno() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO realiza_matricula (cod_aluno, cod_disciplina, cod_semestre, "timestamp")
    SELECT NEW.cod_graduando, oferecida_em.cod_disciplina, oferecida_em.cod_semestre, CURRENT_TIMESTAMP
    FROM oferecida_em
    WHERE cod_semestre = 1 AND ( 
        cod_disciplina = 10001 OR 
        cod_disciplina = 10002 OR
        cod_disciplina = 10003 OR
        cod_disciplina = 10004 OR
        cod_disciplina = 10005
    );
	RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER novo_aluno AFTER INSERT ON graduando
FOR EACH ROW
EXECUTE PROCEDURE matricula_novo_aluno()

-- Exemplo de inserção
-- INSERT INTO graduando(cod_graduando, cod_curso)
-- VALUES (820, 1)

-- Descomentar abaixo para visualizar a tabela
-- SELECT * FROM realiza_matricula

-- SQL Padrão
-- CREATE TRIGGER novo_aluno AFTER INSERT ON graduando
-- REFERENCING NEW ROW AS nrow
-- FOR EACH ROW
-- BEGIN ATOMIC
--    INSERT INTO realiza_matricula (cod_aluno, cod_disciplina, cod_semestre, "timestamp")
--    SELECT nrow.cod_graduando, oferecida_em.cod_disciplina, oferecida_em.cod_semestre, CURRENT_TIMESTAMP
--    FROM oferecida_em
--    WHERE cod_semestre = 1 AND ( 
--        cod_disciplina = 10001 OR 
--        cod_disciplina = 10002 OR
--        cod_disciplina = 10003 OR
--        cod_disciplina = 10004 OR
--        cod_disciplina = 10005
--    );
-- END;
